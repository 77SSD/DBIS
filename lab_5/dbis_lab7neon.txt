1) call db.schema.visualization
2) call db.propertyKeys
3) match (n) return n
4) match (n:Person) return n  
5) match (n:Movie{released:2003}) return n
6) match (n:Movie{released:2003}) return n.title,n.released,n.tagline

7)match (n:Movie{released:2003}) return n.title as MovieTitle,n.released as ReleaseYear,n.tagline as Tagline

8)match (n:Movie {title: "Speed Racer"})<-[:WROTE]-(a:Person) return a,n

9) match (n:Movie)--(a:Person {name:"Tom Hanks"})
return n,a 

9))match (n:Movie)-[r]-(a:Person{name: "Tom Hanks"})
return n,a,type(r)

10)match (n:Movie)<-[ACTED_IN]-(p:Person)
return n,p

11)match (n:Movie)<-[r:ACTED_IN]-(p:Person{name: "Tom Hanks"})
return n.title,p.name,r.roles

12)match (n:Movie{title:"The Matrix"})<-[r:ACTED_IN]-(p:Person)
return n.title,p.name,r.roles 

WHERE CLAUSE --

1)match (n:Movie)<-[r:ACTED_IN]-(p:Person)
where p.name = "Tom Cruise"
return n.title,p.name,r.roles 

2) match (p:Person)
  where p.born >= 1970 and p.born < 1980
  return p.name

%%%
match (n:Movie)<-[r:WROTE-(p:Person)] where type(r) = "WROTE" return n.title,p.name

match (p:Person)
where p.born is NULL 
return p.name, p.born 

6) 
match (n:Movie)<- [r:REVIEWED]-(p:Person)
return m.title,p.name, p.rating
7) 
match (n:Person)
where n.name starts with "son"
return n.name

match (n:Person)
where n.name ends with "son"
return n.name



8) match (n:Person)-[r:REVIEWED]->(m:Movie)
where r.summary contains "fun"
return n.name,r.summary,m.title

9)match (:Movie)<-[:PRODUCED]-(p:Person)
where not exists ((p)-:[DIRECTED]-(:Movie))
return p

10) match (d:Person)-[:DIRECTED]->(m:Movie)<-[a:ACTED_IN]-(p:Person)
where exists ((d)-[:ACTED_IN]-(m))
return m,p,d

11)match (m:Movie)
where m.released in [2002,2000,2004]
return m.title,m.released










1)match(p:Person{name:"Gene Hackman"})-[:ACTED_IN]->(m:Movie) <-[d:DIRECTED]-(a:Person), (a:Person)-[:ACTED_IN]->(m) 
return p,d,a,m

2) match(p:Person {name : "James Thompson"}) -[:FOLLOWS]-(a:Person)
reurn p,a

3) match (p:Person {name:"James Thompson" }) - [:FOLLOWS] -(a:Person)
return a,p


match(p:Person)
where p.name starts with "Tom" 
OPTIONAL MATCH (p)-[:DIRECTED] -(m:movie)
return p.name,m.title


match(p:Person)-[:ACTED_IN]->(m:Movie)
RETURN p.name, collect(m.title)
//p.born , collect(m.title) //


match(p:Person)-[:REVIEWED]->(m:Movie)
return m.title, collect(p.name), size(collect(p.name))
with m.title as mov, collect(p.name)


match (m:Movie)
optional match (p:Person)-[:REVIEWED] ->(m)//
return m.title, collect(p.name), size(collect(p.name))


match(p:Person)-[:ACTED_IN]->(m:Movie)
with p.name as actor , collect(m.title) as movies
where size(movies)= 5
return actor, movies



// match(p:Person)-[:ACTED_IN]->(m:Movie)
with p as actor , collect(m.title) as movies
where size(movies)= 5
return actor.name,actor.born, movies //


match(p:Person)-[r:REVIEWED]->(m:Movie)
with m.title as mov ,avg(r.rating) as average

return average,mov
order by average desc
offset 5


//  limit S // offset S



match(p:Person)-[r:ACTED_IN]->(m:Movie)
with p.name as actor , collect(m.title) as movies 
where size(movie)>=3
return distinct(actor),movies




//
where size(movies)>=3
return p.name,collect(m.title) //




match (p:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(b:Person)
return [p.name,b.name] ,collect(m.title)


match (p:Person)-[:ACTED_IN]->(m:Movie)<- [:PRODUCED]-(a:Person)
with collect(Distinct p.name)as actors , collect(a.name)as producers
return distinct m.title,actors,producerz
order by size(actors)

match(p:Person)





























